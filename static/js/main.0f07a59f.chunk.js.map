{"version":3,"sources":["App.js","index.js"],"names":["App","useState","highlighted","setHighlighted","info","setInfo","error","setError","readText","data","a","type","text","result","parse","header","transform","value","trim","transformHeader","camelCase","some","person","fullName","email","phone","isDateValid","date","currentDate","Date","match","isExperienceValid","experience","age","isIncomeValid","income","Number","parseFloat","toFixed","findDuplicates","people","index","normalizeCase","toLowerCase","normalizePhone","slice","duplicates","emailDuplicate","findIndex","current","phoneDuplicate","push","join","className","onDragEnter","onDragLeave","onDragOver","event","preventDefault","onDrop","file","dataTransfer","files","length","map","isInteger","yearlyIncome","hasChildren","states","licenseStates","split","state","toUpperCase","expirationDate","toLocaleDateString","licenseNumber","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0f07a59f.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { parse } from 'papaparse';\nimport { camelCase } from \"camel-case\";\n\nimport './App.css';\n\nconst App = () => {\n  const [highlighted, setHighlighted] = useState(false);\n  const [info, setInfo] = useState([]);\n  const [error, setError] = useState(false);\n\n  const readText = async (data) => {\n    if (data.type === \"text/csv\") {\n      const text = await data.text();\n      const result = parse(text, {\n        header: true,\n        transform: function (value) {\n          return value.trim();\n        },\n        transformHeader: function (header) {\n          return camelCase(header);\n        }\n      });\n\n      if (result.data.some(person => !person.fullName || !person.email || !person.phone)) {\n        return false;\n      }\n      return result.data;\n    }\n    return false;\n  }\n\n  const isAgeInValid = (age) => {\n    return age < 21 && !Number.isInteger(age);\n  }\n\n  const isDateValid = (date) => {\n    const format1 = /^(0?[1-9]|1[0-2])[\\/](0?[1-9]|[1-2][0-9]|3[01])[\\/]\\d{4}$/;\n    const format2 = /^\\d{4}[\\-](0?[1-9]|1[0-2])[\\-](0?[1-9]|[12][0-9]|3[01])$/;\n    const currentDate = new Date();\n\n    if (date.match(format1) || date.match(format2)) {\n      return new Date(date) > currentDate;\n    }\n }\n\n  const formatDate = (date) => {\n    if (isDateValid(date)) {\n      const result = new Date(date);\n      return result.toLocaleDateString();\n    }\n\n    return date;\n  }\n\n  const isExperienceValid = (experience, age) => {\n\n    return +experience >= 0 && +experience < +age;\n  }\n\n  const isIncomeValid = (income) => {\n    if (Number.parseFloat(income) > 1000000 || Number.parseFloat(income) < 0) {\n      return false;\n    }\n\n    return Number.parseFloat(income).toFixed(2);\n  }\n\n  const isChildrenValid = (hasChildren) => {\n    return hasChildren === \"FALSE\" || hasChildren === \"\" || hasChildren === \"TRUE\";\n  }\n\n  const isLicenseNumberValid = (licenseNumber) => {\n    const licenseFormat = /^[a-zA-Z0-9]{6}$/;\n\n    return licenseNumber.match(licenseFormat);\n  }\n\n  const formatLicenseState = (states) => {\n    const result = states.split(' ').map(state =>\n     state.length > 2 ? state.slice(0, 2).toUpperCase() : state.toUpperCase()\n    );\n    return result.join(' | ');\n  }\n\n  const findDuplicates = (people, index, phone, email) => {\n    const normalizeCase = (data) => data.toLowerCase();\n    const normalizePhone = (data) => data.slice(-10);\n    const duplicates = [];\n\n    const emailDuplicate = people.findIndex(\n        (person, current) => normalizeCase(person.email) === normalizeCase(email) && current !== index\n    );\n    const phoneDuplicate = people.findIndex(\n        (person, current) => normalizePhone(person.phone) === normalizePhone(phone) && current !== index\n    );\n\n    if (phoneDuplicate !== -1) {\n      duplicates.push(`phone - ${phoneDuplicate + 1}`);\n    }\n\n    if (emailDuplicate !== -1) {\n      duplicates.push(`email - ${emailDuplicate + 1}`);\n    }\n\n    return duplicates.join(\", \");\n  }\n\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">Import Contacts</h1>\n      <div\n        className={highlighted ? \"drop drop--active\" : \"drop\"}\n        onDragEnter={() => {\n          setHighlighted(true);\n        }}\n        onDragLeave={() => {\n          setHighlighted(false);\n        }}\n        onDragOver={(event) => {\n          event.preventDefault();\n        }}\n        onDrop={async(event) => {\n          event.preventDefault();\n          setHighlighted(false);\n          const file = event.dataTransfer.files[0];\n\n          const result = await readText(file);\n          if (result) {\n            setInfo(current => [...current, ...result]);\n            setError(false);\n            return;\n          }\n          setError(true);\n        }}\n      >\n        DROP FILE HERE\n      </div>\n\n      {error && (\n        <div className=\"error\">Invalid file format</div>\n      )}\n\n      {info.length !== 0 && (\n        <table className=\"table\">\n        <thead>\n        <tr>\n          <th>ID</th>\n          <th>Full Name</th>\n          <th>Phone</th>\n          <th>Email</th>\n          <th>Age</th>\n          <th>Experience</th>\n          <th>Yearly Income</th>\n          <th>Has children</th>\n          <th>License states</th>\n          <th>Expiration date</th>\n          <th>License number</th>\n          <th>Duplicate with</th>\n        </tr>\n        </thead>\n        <tbody>\n        {info.map((person, index, info) => (\n          <tr key={index}>\n            <td>{index + 1}</td>\n            <td>\n              {person.fullName}\n            </td>\n            <td className={person.phone.length < 10 && \"invalid\"}>\n              {`+1${person.phone.slice(-10)}`}\n            </td>\n            <td>{person.email}</td>\n            <td className={isAgeInValid(person.age) && \"invalid\"}>\n              {person.age}\n            </td>\n            <td className={!isExperienceValid(person.experience, person.age) && \"invalid\"}>\n              {person.experience}\n            </td>\n            <td>\n              {isIncomeValid(person.yearlyIncome) ? isIncomeValid(person.yearlyIncome) : person.yearlyIncome}\n            </td>\n            <td className={!isChildrenValid(person.hasChildren) && \"invalid\"}>\n              {person.hasChildren === \"\" ? \"FALSE\" : person.hasChildren}\n            </td>\n            <td>\n              {formatLicenseState(person.licenseStates)}\n            </td>\n            <td className={!isDateValid(person.expirationDate) && \"invalid\"}>\n              {formatDate(person.expirationDate)}\n            </td>\n            <td className={!isLicenseNumberValid(person.licenseNumber) && \"invalid\"}>\n              {person.licenseNumber}\n            </td>\n            <td>{findDuplicates(info, index, person.phone, person.email)}</td>\n          </tr>\n          ))}\n          </tbody>\n          </table>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}